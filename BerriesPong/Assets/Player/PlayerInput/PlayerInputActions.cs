//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.1.0
//     from Assets/Player/PlayerInput/PlayerInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputActions"",
    ""maps"": [
        {
            ""name"": ""PlayerControlsTop"",
            ""id"": ""f39b4b64-db20-4456-8625-6f89ce161f83"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""PassThrough"",
                    ""id"": ""65aeb02f-b4ff-48a3-a7ea-57d9d6426b25"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """"
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Keyboard"",
                    ""id"": ""f794cbdc-5051-4a73-9f1b-439fdb108a01"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""8734338c-0811-45d1-b387-e180a7170063"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""c711d836-43ab-4ee9-95e1-532f8abab0c0"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""PlayerControlsBottom"",
            ""id"": ""c7f28d5e-86fb-4187-ab59-e0d26cb03296"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""PassThrough"",
                    ""id"": ""750c143c-73ca-4a80-b808-c39a72f234e6"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """"
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Keyboard"",
                    ""id"": ""17a93ae1-b4ba-45fc-ad6f-84e870984ece"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""a4f3beaa-d8de-4ada-90fb-8d451808b339"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""270f90e8-ab70-4def-ab76-86a8d7cd0e48"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // PlayerControlsTop
        m_PlayerControlsTop = asset.FindActionMap("PlayerControlsTop", throwIfNotFound: true);
        m_PlayerControlsTop_Move = m_PlayerControlsTop.FindAction("Move", throwIfNotFound: true);
        // PlayerControlsBottom
        m_PlayerControlsBottom = asset.FindActionMap("PlayerControlsBottom", throwIfNotFound: true);
        m_PlayerControlsBottom_Move = m_PlayerControlsBottom.FindAction("Move", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerControlsTop
    private readonly InputActionMap m_PlayerControlsTop;
    private IPlayerControlsTopActions m_PlayerControlsTopActionsCallbackInterface;
    private readonly InputAction m_PlayerControlsTop_Move;
    public struct PlayerControlsTopActions
    {
        private @PlayerInputActions m_Wrapper;
        public PlayerControlsTopActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_PlayerControlsTop_Move;
        public InputActionMap Get() { return m_Wrapper.m_PlayerControlsTop; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerControlsTopActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerControlsTopActions instance)
        {
            if (m_Wrapper.m_PlayerControlsTopActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_PlayerControlsTopActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_PlayerControlsTopActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_PlayerControlsTopActionsCallbackInterface.OnMove;
            }
            m_Wrapper.m_PlayerControlsTopActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
            }
        }
    }
    public PlayerControlsTopActions @PlayerControlsTop => new PlayerControlsTopActions(this);

    // PlayerControlsBottom
    private readonly InputActionMap m_PlayerControlsBottom;
    private IPlayerControlsBottomActions m_PlayerControlsBottomActionsCallbackInterface;
    private readonly InputAction m_PlayerControlsBottom_Move;
    public struct PlayerControlsBottomActions
    {
        private @PlayerInputActions m_Wrapper;
        public PlayerControlsBottomActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_PlayerControlsBottom_Move;
        public InputActionMap Get() { return m_Wrapper.m_PlayerControlsBottom; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerControlsBottomActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerControlsBottomActions instance)
        {
            if (m_Wrapper.m_PlayerControlsBottomActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_PlayerControlsBottomActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_PlayerControlsBottomActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_PlayerControlsBottomActionsCallbackInterface.OnMove;
            }
            m_Wrapper.m_PlayerControlsBottomActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
            }
        }
    }
    public PlayerControlsBottomActions @PlayerControlsBottom => new PlayerControlsBottomActions(this);
    public interface IPlayerControlsTopActions
    {
        void OnMove(InputAction.CallbackContext context);
    }
    public interface IPlayerControlsBottomActions
    {
        void OnMove(InputAction.CallbackContext context);
    }
}
